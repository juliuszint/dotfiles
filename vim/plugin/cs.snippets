snippet ntc "Empty TextEditorLogic class" m
public static IEnumerable $1TestCases()
{
    yield return new TestCaseData($0).SetDescription("$2");
}

[TestCaseSource("$1TestCases")]
public async Task $1Test()
{}
endsnippet

snippet tel "Empty TextEditorLogic class"
internal class ${1:EditorName}:
    SchulklasseTextEditorWithLifecycle,
    ITextEditorLogic,
    ITextEditorLogicState
{
    private readonly TextEditorUiHolder uiHolder;

    public string Label { get; }
    public bool IsReadOnly { get; }
    public Limit Limit { get; }
    public ValidationResult ValidationResult { get; }
    public Visibility Visibility { get; }
    public string Text { get; private set; }

    public $1(ISchulklasseScope scope)
        :base(scope)
    {
        this.uiHolder = new TextEditorUiHolder();
    }
    public async Task<IDisposable> RegisterObserverAsync(ITextEditorUi ui)
    {
        await this.PushStateAsync(ui);
        return this.uiHolder.Set(ui);
    }

    public Task UpdateAsync(string text)
    {
        return Task.CompletedTask;
    }
}
endsnippet

snippet bel "Empty BooleanEditorLogic class" m
internal class ${1:EditorName} :
    SchulklasseObjectWithLifecycle,
    IBooleanEditorLogic,
    IBooleanEditorLogicState
{
    private readonly BooleanEditorUiHolder uiHolder;

    public string Label => string.Empty;
    public Visibility Visibility => Visibility.Visible;
    public bool Value { get; private set; }

    public $1(ISchulklasseScope scope)
        :base(scope)
    {
        this.uiHolder = new BooleanEditorUiHolder();
    }

    public async Task<IDisposable> RegisterObserverAsync(IBooleanEditorUi ui)
    {
        await this.PushStateAsync(ui);
        return this.uiHolder.Set(ui);
    }

    public Task UpdateValueAsync(bool value)
    {
        return Task.CompletedTask;
    }
}
endsnippet

snippet cl "Empty Command Logic class" m
internal class ${1:CommandName} :
    SchulklasseObjectWithLifecycle,
    ICommandLogic,
    ICommandLogicState
{
    private readonly CommandUiHolder uiHolder;

    public string Title => string.Empty;
    public Visibility Visibility => Visibility.Visible;
    public NotenboxIcon Icon => NotenboxIcon.None;

    public $1(ISchulklasseScope scope${VISUAL}$0)
        :base(scope)
    {
        this.uiHolder = new CommandUiHolder();
    }

    public Task ExecuteAsync()
    {
        return Task.CompletedTask;
    }

    public async Task<IDisposable> RegisterObserverAsync(ICommandUi ui)
    {
        await this.PushStateAsync(ui);
        return this.uiHolder.Set(ui);
    }
}
endsnippet

snippet ore "Empty TextEditorLogic class"
public override async Task OnReceiveEndTransaction(QueryEndTransactionMessage query)
{
    ${VISUAL}
}
endsnippet

snippet tct "NUnit Test with Testcases" m
public static IEnumerable $1TestCases()
{
    yield return new TestCaseData($2).SetDescription("$3")
}

[TestCaseSource("$1TestCases")]
public async Task $1Test($0)
{}
endsnippet

snippet vl "Empty ViewLogic class" m
internal class ${2:ViewLogicName} :
    SchulklasseObjectWithLifecycle,
    IViewLogic<$1>,
    IViewLogicState<$1>
{
    private readonly ViewUiHolder<$1> uiHolder;

    public $1 Item { get; private set; }
    public Visibility Visibility { get; private set; }

    public $2(ISchulklasseScope scope${VISUAL}$0)
        :base(scope)
    {
        this.uiHolder = new ViewUiHolder<$1>();
    }

    protected internal override async Task UpdateFromSourceAsync()
    {
        await this.UpdateVisibilityFromSourceAsync();
        await this.UpdateItemFromSourceAsync();
    }

    private async Task UpdateItemFromSourceAsync()
    {
        var newItem = $1.Empty;

        if(newItem != this.Item) {
            this.Item = newItem;
            await this.uiHolder.PushItemAsync(this.Item);
        }
    }

    private async Task UpdateVisibilityFromSourceAsync()
    {
        var newVisibility = Visibility.Invisible;

        if(newVisibility != this.Visibility) {
            this.Visibility = newVisibility;
            await this.uiHolder.PushVisibilityAsync(this.Visibility);
        }
    }

    public async Task<IDisposable> RegisterObserverAsync(IViewUi<$1> ui)
    {
        await this.PushStateAsync(ui);
        return this.uiHolder.Set(ui);
    }
}
endsnippet

snippet bpl "Empty BindingPropertyLogic class" m
internal class ${2:BindingPropertyName}:
    SchulklasseObjectWithLifecycle,
    IBindingPropertyLogic<$1>
{
    private readonly BindingPropertyUiHolder<$1> uiHolder;

    public $1 Value { get; private set; }

    public $2(ISchulklasseScope scope${VISUAL}$0)
        :base(scope)
    {
        this.uiHolder = new BindingPropertyUiHolder<$1>();
    }

    public async Task<IDisposable> RegisterObserverAsync(IBindingPropertyUi<$1> ui)
    {
        await ui.PushValueAsync(this.Value);
        return this.uiHolder.Set(ui);
    }
}
endsnippet

snippet log "log statement for notenbox log system"
NbEnvironment.Logger.Log(LogLevel.${0:Debug}, \$"$1");
endsnippet

snippet trig "trigger statement for notenbox log system" m
NbEnvironment.DebugSystem.RegisterTrigger("${1:NotRandomIdentifier}", DoTriggerStuffAsync);

Task DoTriggerStuffAsync()
{${VISUAL}$0
    return Task.CompletedTask;
}
endsnippet

snippet ct "return statement for Task.Completed"
return Task.CompletedTask;
endsnippet

snippet ufs "overrides update from source method"
protected internal override async Task UpdateFromSourceAsync()
{
    $0
}
endsnippet

snippet oc "overrides CommitAsync"
protected internal override Task CommitAsync()
{
    return Task.CompletedTask;
}
endsnippet

snippet ort "overrides receive transaction async"
internal override async Task ReceiveTransactionAsync(
    ITransactionMessageProcessResult result,
    MessageBase message)
{
    result.SetDone();
}
endsnippet

snippet fh "C# File Header for Awin-Software"
// Copyright © AWIN-Software, 2019

#region using directives

#endregion
endsnippet

snippet class "new c# class"
${2:internal} class ${1:MyClass}
{
    $0
}
endsnippet

snippet over "overriding a method"
public override void ${1:Method}($0)
{
    base.$1();
}
endsnippet

snippet lc "creating layout Constraint"
NSLayoutConstraint.Create(
    ${1:view1},
    NSLayoutAttribute.${2:Leading},
    NSLayoutRelation.${3:Equal},
    ${4:view2},
    NSLayoutAttribute.${5:Leading},
    ${6:1.0f},
    ${7:0.0f});
endsnippet

###########
#  loops  #
###########

snippet for "for loop" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forr "for loop (reverse)" b
for (int ${1:i} = ${2:10}; $1 >= 0; $1--) {
	${VISUAL}$0
}
endsnippet

snippet foreach "foreach loop" b
foreach (${3:var} ${2:item} in ${1:items}) {
	${VISUAL}$0
}
endsnippet

snippet while "while loop" b
while (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet do "do loop" b
do {
	${VISUAL}$0
} while (${1:true});
endsnippet

snippet ool "override on lifecylcle" m
protected override async Task OnStartupAsync()
{
    await base.OnStartupAsync();
}

protected override async Task OnShutdownAsync()
{
    await base.OnShutdownAsync();
}
endsnippet

snippet ol "override lifecylcle" m
public override async Task StartupAsync()
{
    await base.StartupAsync();
}

public override async Task ShutdownAsync()
{
    await base.ShutdownAsync();
}
endsnippet

snippet nf "setting up a new C# file"
`!p
import os
namespace = path
namespace = namespace.replace('/' + fn, '')
namespace = namespace.replace('/', '.')
snip.rv = "// Copyright © AWIN-Software, 2019{}".format(os.linesep)
snip.rv += "{}".format(os.linesep)
snip.rv += "#region using directives{}".format(os.linesep)
snip.rv += "{}".format(os.linesep)
snip.rv += "#endregion{}".format(os.linesep)
snip.rv += "{}".format(os.linesep)
snip.rv += "namespace {}{}".format(namespace, os.linesep)
snip.rv += "{{{}".format(os.linesep)
snip.rv += "    internal class {}{}".format(snip.basename, os.linesep)
snip.rv += "    {{{}".format(os.linesep)
snip.rv += "    }}{}".format(os.linesep)
snip.rv += "}"
`
endsnippet

snippet ctor "Constructor for Csharp"
`!p
classname = findClosestClassNameToLineNumber(path, vim.current.range.end)
snip.rv = 'public {}()\n'.format(classname)
snip.rv = snip.rv + snip.mkline('{}')`
endsnippet

snippet rprop "Register property to inspection"
NbEnvironment.DebugSystem.RegisterPropertyToInspect(
    ${1:objectToInspect},
    ${2:propertyPath},
    "${3:identifier}",
    true);
endsnippet

global !p
import re

def findClosestClassNameToLineNumber(fileName, currentLineNumber):
    regex = re.compile("(?<=class )\S*")
    classname = ""
    with open(fileName) as f:
        linenumber = 0
        for line in f:
            if linenumber >= currentLineNumber:
                break
            match = regex.search(line)
            if match:
                classname = match.group()
            linenumber = linenumber + 1
    return classname
endglobal
