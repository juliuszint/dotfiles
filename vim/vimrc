"                                     VIM
" =============================================================================
set encoding=utf8
set number
set nowrap
set nobackup
set cursorline
set nowritebackup
set noswapfile
set laststatus=2
set clipboard=unnamed
set autoread
set hidden
set ignorecase
set smartcase
set incsearch
set hlsearch
set autoindent
set secure
set bomb
set termguicolors
set completeopt=
set belloff=all
set guicursor=n-v-c:block-blinkwait900-blinkon500-blinkoff500,i:hor10
filetype plugin indent on
syntax enable
let mapleader="\<space>"
let &errorformat='%f:%l:%c:%m,'.'%f:%l:%c:\ %m,'.'%f(%l\,%c):\ %m'
command! ToggleFullscreen :set invfu

set expandtab
set shiftwidth=4
set softtabstop=4

nmap <C-v> :vsp<cr>
nmap <C-s> :w<cr>
nmap go <C-o>
nmap gj <C-w>j
nmap gk <C-w>k
nmap gl <C-w>l
nmap gh <C-w>h
nmap gnh :noh<cr>
nmap gi <C-i>
map <C-n> :cn<cr>
map <C-p> :cp<cr>
vnoremap <Tab> > gv
vnoremap <S-Tab> < gv
imap <C-s> <esc>:w<cr>
inoremap <C-o> <C-x><C-o>
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
inoremap <expr> <esc>   pumvisible() ? "\<C-e>" : "\<esc>"

autocmd FileType qf wincmd J
autocmd FileType qf resize 20
autocmd FileType qf setlocal nocursorline

autocmd BufNewFile,BufRead *.xaml setf xml
autocmd BufRead,BufNewFile *.swift set filetype=swift
autocmd filetype cs :setlocal syntax=off

"                                   RipGrep
" =============================================================================
nmap <C-g>g :SearchForRegexQf 
nmap <C-g>w :execute "SearchForRegexQf " . expand('<cword>')<cr>
nmap <C-g>c :execute "SearchForRegexQf " . '(new\s+'.expand('<cword>').'\|ForPartsOf<'.expand('<cword>').'>)'<cr>

"                                  FZF(.vim)
" =============================================================================
set rtp+=/usr/local/opt/fzf
nmap <C-f> :Files<cr>
nmap <C-b> :Buffers<cr>
nmap <C-c> :Commands<cr>
nmap <C-h> :History:<cr>

"                                  DevIcons
" =============================================================================
let WebDevIconsUnicodeDecorateFolderNodesExactMatches = 0
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cs'] = ''

"                                  NERDTree
" =============================================================================
" 
let g:NERDTreeIgnore=['.*obj$[[dir]]', '.*bin$[[dir]]']
let g:NERDTreeHijackNetrw=1
let g:NERDTreeWinSize=60
let g:NERDTreeDirArrowCollapsible=''
let g:NERDTreeDirArrowExpandable=''

autocmd filetype nerdtree highlight folder_icon guifg=#60D1FF guibg=NONE
autocmd filetype nerdtree highlight csharp_icon guifg=#88D184 guibg=NONE
autocmd filetype nerdtree highlight solution_icon guifg=#D294E2 guibg=NONE
autocmd filetype nerdtree highlight batch_icon guifg=#82AEF7 guibg=NONE
autocmd filetype nerdtree highlight vim_icon guifg=#6ED65F guibg=NONE
autocmd filetype nerdtree highlight swift_icon guifg=#FA5637 guibg=NONE
autocmd filetype nerdtree highlight swift_icon guifg=#FA5637 guibg=NONE
autocmd filetype nerdtree highlight link script_icon csClass

autocmd filetype nerdtree syn match script_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syn match folder_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syn match vim_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syn match csharp_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syn match swift_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syn match solution_icon /  / containedin=NERDTreeFlags
autocmd filetype nerdtree syntax match NERDTreeDirSlash #/$# containedin=NERDTreeDir conceal contained

nmap <C-e> :e .<cr>
"                                 Omnisharp
" =============================================================================
" 
let g:OmniSharp_highlighting = 1
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_debug = 0
let g:OmniSharp_diagnostic_showid = 0
let g:OmniSharp_loglevel = 'none'
let g:OmniSharp_want_snippet = 1
let g:OmniSharp_highlight_groups = {
\ 'csString': ['string', "string - verbatim"],
\ 'csClass': ['class name'],
\ 'csDelegateName': ['delegate name'],
\ 'csKeyword': ['keyword', 'keyword - control'],
\ 'csComment': [
    \ 'comment',
    \ 'xml doc comment - text',
    \ 'xml doc comment - name',
    \ 'xml doc comment - delimiter'
    \ ],
\ 'csStruct': ['struct name'],
\ 'csInterface': ['interface name'],
\ 'csNumber': ['number'],
\ 'csEnum': ['enum name'],
\ 'csEnumMemberName': ['enum member name'],
\ 'csPreprocessor' : [ 'preprocessor keyword', 'preprocessor text' ],
\ 'csTypeParamName': ['type parameter name'],
\ 'csExcludedCode': ['excluded code'],
\}
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [1, 2, 1, 2],
\ 'border': [1, 1, 1, 1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰' ]
\}

nmap <C-q> :OmniSharpGetCodeActions<cr>
nmap gd :OmniSharpGotoDefinition<cr>

"                                  AutoPairs
" =============================================================================
let g:AutoPairsShortcutToggle=''
let g:AutoPairs = {
\   '\w\zs<':'>',
\   '(':')',
\   '[':']',
\   '{':'}',
\   "'":"'",
\   '"':'"',
\   "`":"`",
\}
command! ToggleAutoPairs :call AutoPairsToggle()

"                                    ALE
" =============================================================================
let g:ale_linters = { 'cs': ['OmniSharp'] }
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:ale_sign_info = ''
let g:ale_change_sign_column_color = 1
let g:ale_enabled = 0
let g:ale_sign_column_always = 1

command! GitDiff :call JCStartJobInBuffer('git diff', '<MiscOutput>', { 'bringToFront' : 1, 'ft' : 'git'})

"                                   minPack
" =============================================================================
"
packadd minpac
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('jiangmiao/auto-pairs')
call minpac#add('junegunn/fzf.vim')
call minpac#add('SirVer/ultisnips')
call minpac#add('scrooloose/nerdtree')
call minpac#add('OmniSharp/omnisharp-vim')
call minpac#add('dense-analysis/ale')
call minpac#add('ryanoasis/vim-devicons')
call minpac#add('rust-lang/rust.vim')
call minpac#add('tpope/vim-fugitive')
call minpac#add('mbbill/undotree')
call minpac#add('tpope/vim-commentary')
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

colorscheme mine
