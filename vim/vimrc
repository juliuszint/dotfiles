"                                     VIM
" =============================================================================

set encoding=utf8
set number
set nowrap
set nobackup
set cursorline
"set nowritebackup
set noswapfile
set laststatus=2
set clipboard=unnamedplus
set autoread
set hidden
set ignorecase
set smartcase
set incsearch
set hlsearch
set autoindent
set secure
set nobomb
set nocompatible
set termguicolors
set completeopt=menu,menuone,noselect
set belloff=all
set nolist
set listchars=tab:»·
set history=5000
set shm+=I
set cinoptions=N-s,g0
set title
set list
set fillchars+=diff:\ 
set diffopt=internal,filler,closeoff
set mouse=
set nofixendofline
set expandtab
set shiftwidth=4
if !has('nvim')
	set noesckeys
endif

filetype plugin indent on
syntax enable
let mapleader="\<space>"

command! Vb normal! <C-v>

nmap <F11> :call GuiWindowFullScreen(!g:GuiWindowFullScreen)<cr>
nmap <C-s> :w<cr>
nmap <Space>s :w<cr>
nmap go <C-o>
nmap gnh :noh<cr>
nmap <C-n> :cn<cr>
nmap <C-p> :cp<cr>
vnoremap <Tab> > gv
vnoremap <S-Tab> < gv
imap <C-s> <esc>:w<cr>

nnoremap gj <C-w>j
nnoremap gk <C-w>k
nnoremap gl <C-w>l
nnoremap gh <C-w>h

nmap <Space>v :vsp<cr>
nmap <Space>a :A<cr>

if has('nvim')
	autocmd TermOpen * setlocal nonumber
	tnoremap <Esc> <C-\><C-n>
	tnoremap <C-v><Esc> <Esc>
endif

autocmd FileType qf wincmd J
autocmd FileType qf resize 15
autocmd FileType qf setlocal nocursorline

autocmd BufNewFile,BufRead *.xaml setf xml
autocmd BufRead,BufNewFile *.swift set filetype=swift
autocmd filetype cs :setlocal syntax=off
autocmd VimEnter * :clearjumps

nnoremap <silent> gf :call GotoFileLineColumn()<cr>

" log.txt
" log.txt:9
" log.txt:3:10
function! GotoFileLineColumn()
	let cfile=expand("<cfile>")
	if !filereadable(cfile)
		echo "This does not look like a file!"
		return
	endif
	let command=":e "
	let line=getline('.')
	let offset=stridx(line, cfile) + len(cfile)
	let offset_col=charidx(line, offset)
	let line_col_match = matchlist(line, '\([:@ ]\*\)\?\(\d\+\)\(\([:@ ]\+\)\(\d\+\)\?\)\?', offset_col)
	let column=get(line_col_match, 2, '')
	let line=get(line_col_match, 5, '0')
	if len(column) > 0
		if len(line) <= 0
			let line="0"
		endif
		let command=command."+call\\ cursor(".column.",".line.") "
	endif
	let command=command.cfile."\<cr>"
	execute "normal \<C-w>w".command
endfunction

"                                  FZF(.vim)
" =============================================================================
set rtp+=/usr/local/opt/fzf
nmap <Space>h :History:<cr>
nmap <Space>c :Commands<cr>
nmap <Space>b :Buffers<cr>
nmap <Space>f :Files<cr>
nmap <Space>j :Jumps<cr>

if has('nvim')
	autocmd FileType fzf tnoremap <buffer> <Esc> <Esc>
endif
"                                  DevIcons
" =============================================================================
let WebDevIconsUnicodeDecorateFolderNodesExactMatches = 0
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cs'] = ''
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsDefaultFolderOpenSymbol=''
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol=''
"                                  Airline
" =============================================================================
"
let g:airline_theme='google_dark'

"                                  NERDTree
" =============================================================================
"
let g:NERDTreeIgnore=['.*obj$[[dir]]', '.*bin$[[dir]]', '__pycache__$[[dir]]']
let g:NERDTreeHijackNetrw=1
let g:NERDTreeDirArrowCollapsible=''
let g:NERDTreeDirArrowExpandable=''
let g:NERDTreeCreatePrefix='silent keepalt keepjumps'
let g:NERDTreeMinimalUI=1
let g:NERDTreeCascadeSingleChildDir=0

autocmd FileType nerdtree syntax match NERDTreeDirSlash #/$# containedin=NERDTreeDir conceal contained

nmap <Space>e :e .<cr>

" NERDTrees File highlighting
function! NERDTreeHighlightSymbol(symbol, highlight, guifg)
   exec 'autocmd FileType nerdtree highlight ' . a:highlight .' guifg='. a:guifg
   exec 'autocmd FileType nerdtree syn match ' . a:highlight .' /'. a:symbol .'/ containedin=NERDTreeFlags'
endfunction


call NERDTreeHighlightSymbol('  ', 'folder_icon_open', '#41a2f1')
call NERDTreeHighlightSymbol('  ', 'folder_icon_close', '#41a2f1')
call NERDTreeHighlightSymbol('  ', 'script_icon', '#834f79')
call NERDTreeHighlightSymbol('  ', 'python_icon', '#f09f17')
call NERDTreeHighlightSymbol('  ', 'json_icon', '#f5c06f')
call NERDTreeHighlightSymbol('  ', 'cxx_source_icon', '#689fb6')
call NERDTreeHighlightSymbol('  ', 'cxx_header_icon', '#ae403f')
call NERDTreeHighlightSymbol('  ', 'vim_icon', '#8faa54')
call NERDTreeHighlightSymbol('  ', 'rust_icon', '#f16526')
call NERDTreeHighlightSymbol('  ', 'solution_icon', '#d294e2')
call NERDTreeHighlightSymbol(' 󰌛 ', 'csharp_icon', '#88d184')

"                                 Omnisharp
" =============================================================================
"
let g:OmniSharp_highlighting = 1
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_debug = 0
let g:OmniSharp_diagnostic_showid = 0
let g:OmniSharp_loglevel = 'none'
let g:OmniSharp_want_snippet = 1
let g:OmniSharp_highlight_groups = {
\ 'csString': ['string', "string - verbatim"],
\ 'csClass': ['class name'],
\ 'csDelegateName': ['delegate name'],
\ 'csKeyword': ['keyword', 'keyword - control'],
\ 'csComment': [
    \ 'comment',
    \ 'xml doc comment - text',
    \ 'xml doc comment - name',
    \ 'xml doc comment - delimiter'
    \ ],
\ 'csStruct': ['struct name'],
\ 'csInterface': ['interface name'],
\ 'csNumber': ['number'],
\ 'csEnum': ['enum name'],
\ 'csEnumMemberName': ['enum member name'],
\ 'csPreprocessor' : [ 'preprocessor keyword', 'preprocessor text' ],
\ 'csTypeParamName': ['type parameter name'],
\ 'csExcludedCode': ['excluded code'],
\}
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [1, 2, 1, 2],
\ 'border': [1, 1, 1, 1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰' ]
\}

nmap <C-q> :OmniSharpGetCodeActions<cr>
nmap gd :OmniSharpGotoDefinition<cr>

"                                  AutoPairs
" =============================================================================
let g:AutoPairsShortcutToggle=''
let g:AutoPairs = {
\   '\w\zs<':'>',
\   '(':')',
\   '[':']',
\   '{':'}',
\   "'":"'",
\   '"':'"',
\   "`":"`",
\}
command! ToggleAutoPairs :call AutoPairsToggle()

"                                   cursorword
" =============================================================================
"
let g:cursorword_delay=800
let g:cursorword=0

"                                   A.vim
" =============================================================================
"
let g:alternateNoDefaultAlternate=1

"                                EditorConfig
" =============================================================================
"
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
au FileType gitcommit let b:EditorConfig_disable = 1

"                                NeoTerm
" =============================================================================
"
let g:neoterm_automap_keys='<space>tt'

"                                TmuxLine
" =============================================================================
"
"let g:tmuxline_preset = 'mine'

let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '',
    \ 'right' : '',
    \ 'right_alt' : '',
    \ 'space' : ' '}

"                                UltiSnips
" =============================================================================
"
let g:UltiSnipsJumpForwardTrigger = '<c-n>'
let g:UltiSnipsJumpBackwardTrigger = '<c-p>'

"                                better-whitespace
" =============================================================================
"
let g:better_whitespace_filetypes_blacklist = [ 'eml', 'mail', 'gitsendemail' ]

"                                   minPack
" =============================================================================
"
packadd minpac
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('jiangmiao/auto-pairs')
call minpac#add('junegunn/fzf.vim')
call minpac#add('sirver/ultisnips')
call minpac#add('scrooloose/nerdtree')
call minpac#add('omnisharp/omnisharp-vim')
call minpac#add('ryanoasis/vim-devicons')
call minpac#add('rust-lang/rust.vim')
call minpac#add('tpope/vim-fugitive')
call minpac#add('mbbill/undotree')
call minpac#add('tpope/vim-commentary')
call minpac#add('cespare/vim-toml')
call minpac#add('peterhoeg/vim-qml')
call minpac#add('itchyny/vim-cursorword')
call minpac#add('kassio/neoterm')
call minpac#add('neovim/nvim-lspconfig')
call minpac#add('vim-scripts/a.vim')
call minpac#add('editorconfig/editorconfig-vim')
call minpac#add('vim-airline/vim-airline')
call minpac#add('vim-airline/vim-airline-themes')
call minpac#add('ntpeters/vim-better-whitespace')
call minpac#add('edkolev/tmuxline.vim')

call minpac#add('hrsh7th/nvim-cmp')
call minpac#add('hrsh7th/cmp-path')
call minpac#add('hrsh7th/cmp-buffer')
call minpac#add('hrsh7th/cmp-cmdline')
call minpac#add('hrsh7th/cmp-nvim-lsp')
call minpac#add('hrsh7th/cmp-nvim-lsp-signature-help')
call minpac#add('quangnguyen30192/cmp-nvim-ultisnips')
call minpac#add('onsails/lspkind-nvim')
call minpac#add('GutenYe/json5.vim')
call minpac#add('nvim-treesitter/nvim-treesitter')


command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

colorscheme mine

"                                   LUA stuff
" =============================================================================
"
luafile ~/.config/nvim/ini.lua
