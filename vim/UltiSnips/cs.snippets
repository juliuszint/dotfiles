snippet log "log statement for notenbox log system"
NbEnvironment.Logger.Log(LogLevel.${0:Debug}, \$"$1");
endsnippet

snippet trig "trigger statement for notenbox log system"
NbEnvironment.DebugSystem.RegisterTrigger("${0:NotRandomIdentifier}", () => {
					    $1
					    return Task.CompletedTask;
					  });
endsnippet

snippet ct "return statement for Task.Completed"
return Task.CompletedTask;
endsnippet

snippet nf "setting up a new C# file"
// Copyright Â© AWIN-Software, 2018

#region using directives

#endregion

namespace ${1:MyNamespace}
{
    internal class ${2:MyClass}
    {
    }
}
endsnippet

snippet class "new c# class"
${2:internal} class ${1:MyClass}
{
    $0
}
endsnippet

snippet over "overriding a method"
public override void ${1:Method}($0)
{
    base.$1();
}
endsnippet

snippet lc "creating layout Constraint"
NSLayoutConstraint.Create(
    ${1:view1},
    NSLayoutAttribute.${2:Leading},
    NSLayoutRelation.${3:Equal},
    ${4:view2},
    NSLayoutAttribute.${5:Leading},
    ${6:1.0f},
    ${7:0.0f});
endsnippet

###########
#  loops  #
###########

snippet for "for loop" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forr "for loop (reverse)" b
for (int ${1:i} = ${2:10}; $1 >= 0; $1--) {
	${VISUAL}$0
}
endsnippet

snippet foreach "foreach loop" b
foreach (${3:var} ${2:item} in ${1:items}) {
	${VISUAL}$0
}
endsnippet

snippet while "while loop" b
while (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet do "do loop" b
do {
	${VISUAL}$0
} while (${1:true});
endsnippet

snippet ool "override on lifecylcle"
protected override async Task OnStartupAsync()
{
    await base.OnStartupAsync();
}

protected override async Task OnShutdownAsync()
{
    await base.OnShutdownAsync();
}
endsnippet

snippet ctor "Constructor for Csharp"
`!p
classname = findClosestClassNameToLineNumber(path, vim.current.range.end)
snip.rv = 'public {}()\n'.format(classname)
snip.rv = snip.rv + snip.mkline('{}')`
endsnippet

global !p
import re

def findClosestClassNameToLineNumber(fileName, currentLineNumber):
    regex = re.compile("(?<=class )\S*")
    classname = ""
    with open(fileName) as f:
        linenumber = 0
        for line in f:
            if linenumber >= currentLineNumber:
                break
            match = regex.search(line)
            if match:
                classname = match.group()
            linenumber = linenumber + 1
    return classname
endglobal
